/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.models

import org.openapitools.client.models.ExternalIssue
import org.openapitools.client.models.IssueAttachment
import org.openapitools.client.models.IssueComment
import org.openapitools.client.models.IssueCustomField
import org.openapitools.client.models.IssueLink
import org.openapitools.client.models.IssueVoters
import org.openapitools.client.models.IssueWatchers
import org.openapitools.client.models.Project
import org.openapitools.client.models.Tag
import org.openapitools.client.models.User
import org.openapitools.client.models.Visibility

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * Represents an issue in YouTrack.
 *
 * @param id 
 * @param attachments 
 * @param comments 
 * @param commentsCount 
 * @param created 
 * @param customFields 
 * @param description 
 * @param draftOwner 
 * @param externalIssue 
 * @param idReadable 
 * @param isDraft 
 * @param links 
 * @param numberInProject 
 * @param parent 
 * @param project 
 * @param reporter 
 * @param resolved 
 * @param subtasks 
 * @param summary 
 * @param tags 
 * @param updated 
 * @param updater 
 * @param visibility 
 * @param voters 
 * @param votes 
 * @param watchers 
 * @param wikifiedDescription 
 * @param dollarType 
 */


interface Issue {

    @Json(name = "id")
    val id: kotlin.String?
    @Json(name = "attachments")
    val attachments: kotlin.collections.List<IssueAttachment>?
    @Json(name = "comments")
    val comments: kotlin.collections.List<IssueComment>?
    @Json(name = "commentsCount")
    val commentsCount: kotlin.Int?
    @Json(name = "created")
    val created: kotlin.Long?
    @Json(name = "customFields")
    val customFields: kotlin.collections.List<IssueCustomField>?
    @Json(name = "description")
    val description: kotlin.String?
    @Json(name = "draftOwner")
    val draftOwner: User?
    @Json(name = "externalIssue")
    val externalIssue: ExternalIssue?
    @Json(name = "idReadable")
    val idReadable: kotlin.String?
    @Json(name = "isDraft")
    val isDraft: kotlin.Boolean?
    @Json(name = "links")
    val links: kotlin.collections.List<IssueLink>?
    @Json(name = "numberInProject")
    val numberInProject: kotlin.Long?
    @Json(name = "parent")
    val parent: IssueLink?
    @Json(name = "project")
    val project: Project?
    @Json(name = "reporter")
    val reporter: User?
    @Json(name = "resolved")
    val resolved: kotlin.Long?
    @Json(name = "subtasks")
    val subtasks: IssueLink?
    @Json(name = "summary")
    val summary: kotlin.String?
    @Json(name = "tags")
    val tags: kotlin.collections.List<Tag>?
    @Json(name = "updated")
    val updated: kotlin.Long?
    @Json(name = "updater")
    val updater: User?
    @Json(name = "visibility")
    val visibility: Visibility?
    @Json(name = "voters")
    val voters: IssueVoters?
    @Json(name = "votes")
    val votes: kotlin.Int?
    @Json(name = "watchers")
    val watchers: IssueWatchers?
    @Json(name = "wikifiedDescription")
    val wikifiedDescription: kotlin.String?
    @Json(name = "\$type")
    val dollarType: kotlin.String?
}

